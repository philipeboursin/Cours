#include<stdio.h>
#include<flint/padic.h>
#include<gmp.h>

//  ----------------on initialise les premières constantes et le context


fmpz_t p; // le nb premier en question
fmpz_init_set_ui(p, 2);


padic_ctx_t C;
N=20 // la précision 2-adique
padic_ctx_init(C, p, 0, N, PADIC_SERIES); 





// on a besoin de pouvoir réduire les polynômes 2-adiques modulo 2^N


padic_poly_t redmod2n( padic_poly_t P, int N ) 
{
    padic_poly_t mod;
    fmpz_t d ;
    fmpz_init_set_ui(d, padic_poly_degree(P));
    int deg;
    deg=fmpz_get_si(d);
    padic_poly_init2(mod, deg+1, N);
    padic_poly_set(mod, P,C);
    return mod; 
}



// on a besoin de construire P(-X) à partir de P(X) 

padic_poly_t CompomoinsX( padic_poly_t P)
{
    padic_poly_t res;
    padic_poly_init(res);

    padic_poly_t moinsX;
    padic_poly_init(moinsX);
    padic_t moinsun;
    padic_init(moinsun);
    padic_t a;
    padic_init(a);
    padic_one(a);
    padic_neg(moinsun,a,C);
    padic_poly_set_coeff_padic(moinsX,1,moinsun, C);


    padic_poly_compose(res, P, moinsX, C);

    return res;
}

// on a besoin de pouvoir definir des polynomes par P(X^2)= .... connaissant P(X)

padic_poly_t CompoX2( padic_poly_t P)
{
    padic_poly_t res;
    padic_poly_init(res);

    padic_poly_t X2;
    padic_poly_init(X2);
    padic_t a;
    padic_init(a);
    padic_one(a);
    padic_poly_set_coeff_padic(X2,2,a, C);
    padic_poly_compose(res, P, X2, C);

    return res;

}


// ----------------- l'incrémentation de Teichmuller


padic_poly_t TechModIncre( padic_poly_t M0, padic_poly_t M1, padic_poly_t V, int N)

    {
        if (N==1)
        {
            padic_poly_t delta;
            padic_poly_init(delta);

            padic_poly_t vmod2;
            padic_poly_init(vmod2);
            padic_poly_set(vmod2, redmod2n(V,1) );

            padic_poly_neg(delta, vmod2, C);
            padic_poly_clear(vmod2);

        }
        else
        {
            int Nr = (N>>1)+(N&1)           ; // partie entiere superieur de N/2
            padic_poly_t deltar;
            padic_poly_init(deltar);
            deltar=TechModIncre(M0,M1,V,Nr);
            
            padic_poly_t delta0 ;
            padic_poly_init2(delta0);


        }
        


        
    }












